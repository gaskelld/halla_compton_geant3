ve/del *
hi/del *
close 0 
 

exe ~/hallc#setup
 
set *fon 66
set ysiz 20
set csiz 0.4

****************
**** INPUTS ****
****************

*-> # of Fit Parameters

fitparam=2
 edge_strip=90.37
 edge_strip_int=90
file=compton_10p4mm.hbook
 
*-> inefficienies 1=yes; 0=no -->>> be sure to change in the trigger as well

ineff=0


*-> What Plane Number to Analyze and How
 plane=1
 planespace=0.01

 nstrips=96
 strip_shift=0.0

*-> Theory
beam_energy=1.159
mass_elec=0.000510998910
* pi_number=3.141592
* hbarc=0.197
pi_number=3.141592654
hbarc=0.1973269631
lambda=532.0
 thdet = 10.2785
* thdet = 0.0

zdrift = 2.275 

* mfield = 0.55264
mfield = 0.5518609
lmag = 1.25
ldet=1.95-24.5/100
strip_width=0.0002*96/[nstrips]


*-> Rho
rho_exctraction=1
method_rho=2
rho_parametrization=0
if ([rho_exctraction] = 0) then
 dtor1=0
 dtor2=0
 dtor3=0
 dtor4=0
endif
*1 extraction
*2 fit from table
* syst. due to the size of the strip
* will be based on the correct mfield
* which I got from parametrization !!!

 

if ([fitparam] = 1) then 
  if ([plane] = 1) then
     param2=1
  endif  
  if ([plane] = 2) then
     param2=1
  endif  
  if ([plane] = 3) then
    param2=1
  endif  
  if ([plane] = 4) then
    param2=1
  endif
endif
if ([fitparam] = 2) then
 param2=0
endif
if ([fitparam] = 3) then
 param2=0
endif

thetabend = [thdet]


***inefficiencies of each strip***

ve/cr steff(100) r 0.738784 0.901508 0.92897 0.906751 _
0.788948 0.979106 0.479929 0.895811 0.902879 0.825672 _
0.000000 0.789597 0.997649 0.360571 0.87536 0.818515 _
0.872622 0.674188 0.236137 0.694874 0.657126 0.991554 _
0.868207 0.729059 0.811685 0.80618 0.849706 0.684571 _
0.802109 0.788766 0.866718 0.990439 0.615052 0.352437 _
0.624556 0.812179 0.187273 0.838017 0.929875 0.050505 _
0.926972 0.284655 0.892544 0.996923 0.976308 0.681935 _
0.667589 0.743127 0.671888 0.977432 0.823006 0.650815 _
0.995517 0.053342 0.629024 0.942854 0.983961 0.893357 _
0.635873 0.765348 0.73453 0.989518 0.835677 0.763209 _
0.896931 0.849605 0.833868 0.809937 0.830316 0.941887 _
0.649549 0.9801961 0.620372 0.73013 0.658884 0.670023 _
0.672856 0.938624 0.917229 0.965011 0.766583 0.757121 _
0.740502 0.902815 0.649652 0.905020 0.807634 0.668078 _
0.702527 0.799731 0.812888 0.672309 0.688432 0.886715 _
0.881429 0.84684

vec/cop steff ?

ve/cr stefpl1(96) 
ve/cr stefpl2(96) 
ve/cr stefpl3(96) 
ve/cr stefpl4(96) 

sigma stefpl1=steff

***Scramble the inefficiencies in each plane -> be sure matches in trigger****

*do i=40,96
*   j=[i]-39
*   ve/input stefpl2([j]) stefpl1([i])
*enddo
*
*do i=1,39
*   j=[i]+96-39
*   ve/input stefpl2([j]) stefpl1([i])
*enddo
*
*do i=65,96
*   j=[i]-64
*   ve/input stefpl3([j]) stefpl2([i])
*enddo

*do i=1,64
*   j=[i]+96-64
*   ve/input stefpl3([j]) stefpl2([i])
*enddo

*do i=27,96
*   j=[i]-26
*   ve/input stefpl4([j]) stefpl3([i])
*enddo
*
*do i=1,26
*   j=[i]+96-26
*   ve/input stefpl4([j]) stefpl3([i])
*enddo

do i=1,96
  ve/input stefpl1([i]) 1
  ve/input stefpl2([i]) 1
  ve/input stefpl3([i]) 1
  ve/input stefpl4([i]) 1
enddo



do i=1,48
   id = 2*[i]
   ve/input stefpl4([id]) 0.0
enddo

*ve/pr stefpl[plane]

************************************** 
** Pull Info Out of Simulation      **
** And Place Asymmetry in Histogram **
** with correct errors              **
**************************************

hi/del *

bin=[nstrips]+0.5
histogram/create/1dhisto 10. 'Difference' [nstrips] 0.48 1.0
histogram/create/1dhisto 11. 'Difference Prime' [nstrips] 0.47 1.0
histogram/create/1dhisto 12. ' ' [nstrips] 0.47 1.0
histogram/create/1dhisto 13. ' ' [nstrips] 0.47 1.0
histogram/create/1dhisto 20. 'Sum' [nstrips] 0.47 1.0
histogram/create/1dhisto 21. ' ' [nstrips] 0.47 1.0
histogram/create/1dhisto 25. 'Number' [nstrips] 0.47 1.0
histogram/create/1dhisto 30. ' ' [nstrips] 0.47 1.0
histogram/create/1dhisto 31. 'Asymmetry Squared' [nstrips] 0.47 1.0


 Histogram/file 1 /g/c-compton/gaskelld/GEANT3/compton_geant_cvs/compton_geant/ntuples/[file] 0 -x
* Histogram/file 1 /g/c-compton/gaskelld/compton_geant_cvs/compton_geant/compton_map5.hbook 0 -x
* Histogram/file 1 /g/c-compton/gaskelld/compton_geant_cvs/compton_geant/compton.hbook 0 -x
 
 nt/cut $1 trigger.f77=1
 nt/cut $2 Ehit_pl[plane]>0.00018.and.nht_pl1>0
 
 nt/cut $99 $2
 
Ntuple/Project 10 //LUN1/2.gam_rho apower*wXsect*wLumin.and.$99
Ntuple/Project 11 //LUN1/2.gam_rho apower*apower*wXsect*wLumin.and.$99
Ntuple/Project 12 //LUN1/2.gam_rho wXsect*wXsect*wLumin*wLumin*apower*apower.and.$99
Ntuple/Project 13 //LUN1/2.gam_rho wXsect*wXsect*wLumin*wLumin*apower.and.$99
Ntuple/Project 20 //LUN1/2.gam_rho wXsect*wLumin.and.$99
Ntuple/Project 21 //LUN1/2.gam_rho wXsect*wXsect*wLumin*wLumin.and.$99
Ntuple/Project 25 //LUN1/2.gam_rho $99

mess Half way there...

Fortran/Close 1



if ([ineff]=1) then

*******************STRIP INEFFICIENCIES**************************

histogram/create/1dhisto 500. 'Inefficiencies' [nstrips] 0. 1.0
Histogram/put_vect/contents 500 stefpl[plane]         

Histogram/operations/multiply 10 500 10
Histogram/operations/multiply 11 500 11
Histogram/operations/multiply 12 500 12
Histogram/operations/multiply 13 500 13
Histogram/operations/multiply 20 500 20
Histogram/operations/multiply 21 500 21
Histogram/operations/multiply 25 500 25


******************************************************************

endif


*** claculate errors of weighted Monte Carlo events ***


Histogram/operations/divide 10 20 30
Histogram/operations/divide 11 20 31

ve/cre N([nstrips]) r
ve/cre avgasym([nstrips]) r
ve/cre avg_asym_sq([nstrips]) r
ve/cre squared_asym_avg([nstrips]) r
ve/cre asymvar([nstrips]) r
ve/cre asymerr([nstrips]) r
ve/cre wsqxsq([nstrips]) r
ve/cre w([nstrips]) r
ve/cre wx([nstrips]) r
ve/cre wsqx([nstrips]) r
ve/cre wsq([nstrips]) r
ve/cre wsqxsqN([nstrips]) r
ve/cre wN([nstrips]) r
ve/cre wxN([nstrips]) r
ve/cre wsqxN([nstrips]) r
ve/cre wsqN([nstrips]) r

ve/cre A([nstrips])
ve/cre B([nstrips])
ve/cre C([nstrips])

histogram/get_vect/contents 25 N
histogram/get_vect/contents 10 wx
histogram/get_vect/contents 12 wsqxsq
histogram/get_vect/contents 13 wsqx
histogram/get_vect/contents 20 w
histogram/get_vect/contents 21 wsq

*normalize
sigma wxN=wx/N
sigma wsqxsqN=wsqxsq/(N**2)
sigma wsqxN=wsqx/(N**2)
sigma wN=w/N
sigma wsqN=wsq/(N**2)


sigma A=wsqxsqN/(wN**2)
sigma B=((wxN**2)*wsqN)/(wN**4)
sigma C=(2*wxN*wsqxN)/(wN**3)

sigma asymerr=sqrt(A+B-C)


*histogram/get_vect/contents 30 avgasym
*histogram/get_vect/contents 31 squared_asym_avg

*vector/operations/vmultiply avgasym avgasym avg_asym_sq
*vector/operations/vsubtract squared_asym_avg avg_asym_sq asymvar
*sigma asymerr=sqrt(asymvar/N)


histogram/create/1dhisto 1000. 'Errors' [nstrips] 0. 1.0
Histogram/put_vect/contents 1000 asymerr
test=[edge_strip_int]
Histogram/plot 1000(5:[test])

wait

Histogram/put_vect/errors 30 asymerr
Histogram/plot 30
hplot/atitle 'Strip Number' 'Asymmetry'


wait
 
*2) Plot Asymmetry vs Strip Number
 
 zone 1 2
* null 0 [edge_strip_int] -0.015 0.05
 null 0 1 -0.015 0.05

set xlab 2.2
set ylab 1.2
set asiz 0.7
atitl ' ' 'Asymmetry'
atitl 'Strip Number'
set plci 1
line -5 0 100 0




*3) FIT
ve/del par
ve/del errpar

*mess comp_edge=[comp_edge]
*mess edge_strip=[edge_strip]
*mess param2=[param2] 
*mess fitparam=[fitparam] 
*mess beam_energy=[beam_energy]
*mess mass_elec=[mass_elec]
*mess pi_number=[pi_number]
*mess hbarc=[hbarc]
*mess lambda=[lambda] 
*mess dtor1=[dtor1]
*mess dtor2=[dtor2]
*mess dtor3=[dtor3]
*mess dtor4=[dtor4]
*mess strip_width=[strip_width]
*mess nstrips=[nstrips]
 
 
ve/inp ?(1:1) [fitparam] 
ve/inp ?(2:2) [beam_energy]
ve/inp ?(3:3) [mass_elec]
ve/inp ?(4:4) [pi_number]
ve/inp ?(5:5) [hbarc]
ve/inp ?(6:6) [lambda] 


if ([fitparam] = 3) then
 ve/cr par(3) r 1 1 60
 ve/cr errpar(3) r 0 0 0 
endif 
* if ([fitparam] = 2) then
* ve/cr par(2) r 1 1
* ve/cr errpar(2) r 0 0 
* endif
if ([fitparam] = 2) then
 ve/cr par(1) r 0.85
 ve/cr errpar(1) r 0 
endif 
 
if ([fitparam] = 1) then
 ve/cr par(1)
 ve/cr errpar(1)
endif


ve/cr chi2(1) r
*null -5 60 -0.04 0.05
*hi/plo 30 s
hist/fit 30(5:[test]) asum_fit_rho.f s,e 1 par ! ! ! errpar 

Call chiq.f
x2=chi2(1)
 

*4) Print on the Screen 
*set txci 1
*string1 = Run (Laser ON/OFF) = [run]
*graph/prim/text 0 0.135 [string1] ! ! !

pol2par=par(1) 
epol2par=errpar(1) 

pol2par=[pol2par]*100
epol2par=[epol2par]*100

 
sss=syst(1)
sssf=$FORMAT([sss],F6.4)


pol2par=$FORMAT([pol2par],F6.4)
epol2par=$FORMAT([epol2par],F6.4)
set txci 1
string7 = Pol. = [pol2par]"Y# +/- [epol2par]"Y#
*graph/prim/text 0 0.095 [string7] ! ! !
itx 2 0.045 [string7]
set txci 1

set txci 1
x2f=$FORMAT([x2],F6.4)
string77 = [v]^2! of the Fit = [x2f]
*graph/prim/text 0 0.06 [string77] ! ! !
itx 2 0.025 [string77]
set txci 1
  
*set txci 4
*string8 = Theory(Fit)
*graph/prim/text 0 0.060 [string8] ! ! !
set txci 1  

set lwid 5  
*line 15 0.063 22 0.063
set lwid
  
set hwid 5
set hcol 2
set ltyp 1
fun/plo asum_fit_rho.f 0 1 s,c 
set hwid  
set hcol 1 

 
mess 
mess Calculate Polarization from Two Parameters Fit .... Done
mess


*plot residuals->actual graphing at end of script for visual purposes

ve/cr residuals([nstrips]) r 
ve/cr values([nstrips]) r
ve/cr fitval([nstrips]) r
ve/cr strn([nstrips]) r

pol=par(1)

if ([fitparam] > 1) then
* effwid=par(2)
  effwid=1.0
  edge_strip=par(2)
else
   effwid=1.0
endif

if ([fitparam] = 3) then 
   effstr=par(3)
   ve/print par(3)
else
   effstr=0.0
endif

histogram/get_vect/contents 30 values

*evaluate fit funtion
 
* do i=1, [nstrips]
* exe asum_fit_eval_rho.kumac _
* [beam_energy] _
* [mass_elec] _
* [pi_number] _
* [hbarc] _
* [lambda] _
* [i]_
* ve/inp fitval([i]) asumfit
* ve/inp strn([i]) [i]
* enddo

vector/operations/vsubtract values fitval residuals

*zone 1 2 1 s

*hplot/null -5 65 -0.00003 0.00003
*hplot/null 0 65 -0.00045 0.00045
 null 0 96 -0.0002 0.0002

hplot/errors strn(5:[test]) residuals(5:[test]) asymerr(5:[test]) asymerr(5:[test]) [edge_strip_int] ! 0.1 s,1,0

atit 'Strip Number' 'Asymmetry-fit'
 
